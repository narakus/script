CREATE DATABASE hive_110 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
grant all privileges on hive_110.* to hadoop_u@'%' identified by "MPOYNAtvHyb8";
revoke all on *.* from dba@localhost;


yum install yum-plugin-downloadonly

etcd 使用记录：
yum install etcd


consul:

查询
curl localhost:8500/v1/catalog/nodes
dig @127.0.0.1 -p 8600 cn4.node.consul
consul catalog nodes


查询异常状态http接口
curl http://localhost:8500/v1/health/state/critical

查询leader
http://localhost:8500/v1/status/leader

查询事件列表
http://localhost:8500/v1/event/list

http api 调用
curl http://localhost:8500/v1/catalog/service/web

只查询健康状态的
curl 'http://localhost:8500/v1/health/service/web?passing'

查询nodes
curl localhost:8500/v1/catalog/nodes | python -m json.tool


server端启动
consul agent -bootstrap-expect 2 -server -ui -data-dir /data/consul0 -node=cn1 -bind=10.8.10.100 -config-dir /etc/consul.d -enable-script-checks=true -datacenter=dc1 -client 0.0.0.0

创建配置文件注册服务
echo '{"service": {"name": "web", "tags": ["rails"], "port": 80}}' \
    | sudo tee /etc/consul.d/web.json 



通过DNS记录查找
dig @127.0.0.1 -p 8600 web.service.consul





k8s note:
virtualbox : https://www.virtualbox.org/wiki/Linux_Downloads
kubectl : https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#client-binaries-1
kube-ansible : https://github.com/inwinstack/kube-ansible
k8s-demo : ;https://github.com/acinwinstack/k8s-concept-demo




dig @127.0.0.1 -p 8600 web.service.consul SRV

查找web下含有railstag的服务
dig @127.0.0.1 -p 8600 rails.web.service.consul

http注册服务
curl -X PUT -d '{"Datacenter": "dc1", "Node": "c2", "Address": "10.155.0.106", "Service": {"Service": "MAC", "tags": ["lianglian", "Mac"], "Port": 22}}' http://127.0.0.1:8500/v1/catalog/register


上传key
curl -X PUT -d 'test' http://localhost:8500/v1/kv/web/key1
curl -X PUT -d 'test'  http://localhost:8500/v1/kv/web/sub/key3
curl -X PUT -d 'test' http://localhost:8500/v1/kv/web/key2?flags=42

查询所有key
curl -s http://localhost:8500/v1/kv/web/?recurse | python -m 
查询单个key
curl -s http://localhost:8500/v1/kv/web/key1 | python -m json.tool

删除key
 curl -X DELETE http://localhost:8500/v1/kv/web/sub?recurse

修改key
可以通过发送相同的URL并提供不同的消息体的PUT请求去修改一个Key.另外,Consul提供一个检查并设置的操作,实现原子的Key修改.通过?cas=参数加上GET中最近的ModifyIndex来达到. 例如我们想修改 “web/key1”:

curl -X PUT -d 'newval' http://localhost:8500/v1/kv/web/key1?cas=502660
true
curl -X PUT -d 'newval' http://localhost:8500/v1/kv/web/key1?cas=502660
false


在这种情况下,第一次CAS 更新成功因为ModifyIndex是502660.而第二次失败是因为ModifyIndex在第一次更新后已经不是502660了 .

我们也可以使用ModifyIndex来等待key值的改变.例如我们想等待key2被修改:

curl "http://localhost:8500/v1/kv/web/key2"
[{"LockIndex":0,"Key":"web/key2","Flags":42,"Value":"dGVzdA==","CreateIndex":502663,"ModifyIndex":502663}]

curl "http://localhost:8500/v1/kv/web/key2?index=502663&wait=5s"
[{"LockIndex":0,"Key":"web/key2","Flags":42,"Value":"dGVzdA==","CreateIndex":502663,"ModifyIndex":502663}]

通过提供 ?index=,我们请求等待key值有一个比502663更大的ModifyIndex.虽然?wait=5s参数限制了这个请求最多5秒,否则返回当前的未改变的值. 这样可以有效的等待key的改变.另外,这个功能可以用于等待一组key.直到其中的某个key有修改.




HTTP API

/v1/agent/checks : 返回本地agent注册的所有检查(包括配置文件和HTTP接口)
/v1/agent/services : 返回本地agent注册的所有 服务
/v1/agent/members : 返回agent在集群的gossip pool中看到的成员
/v1/agent/self : 返回本地agent的配置和成员信息
/v1/agent/join/<address> : 触发本地agent加入node
/v1/agent/force-leave/<node>>: 强制删除node
/v1/agent/check/register : 在本地agent增加一个检查项，使用PUT方法传输一个json格式的数据
/v1/agent/check/deregister/<checkID> : 注销一个本地agent的检查项
/v1/agent/check/pass/<checkID> : 设置一个本地检查项的状态为passing
/v1/agent/check/warn/<checkID> : 设置一个本地检查项的状态为warning
/v1/agent/check/fail/<checkID> : 设置一个本地检查项的状态为critical
/v1/agent/service/register : 在本地agent增加一个新的服务项，使用PUT方法传输一个json格式的数据
/v1/agent/service/deregister/<serviceID> : 注销一个本地agent的服务项


[virtualbox]
name=Oracle Linux / RHEL / CentOS-$releasever / $basearch - VirtualBox
baseurl=http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://www.virtualbox.org/download/oracle_vbox.asc


解决harbar 509 问题
chmod 644 /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem 
cat /root/20180727/zeasn.com.crt >> /etc/pki/tls/certs/ca-bundle.crt 
chmod 444 /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem 
docker-compose down 
systemctl restart docker 
docker-compose up -d 
docker login harbar.zeasn.com

#mysql
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('xxx');
grant all privileges on *.* to root@"%" identified by "XXX";
flush privileges;
create database charset="utf8"


#docker 容器导出
docker commit a11455cced83 mysql_backup
docker save mysql_backup > /data/mysql_backup2.tar

#docker 容器导入
docker load  < wordpress_mysql.tar




#MongoDB设置密码
use admin
db.createUser({user:"root",pwd:"你的密码",roles:[{"role":"root","db":"admin"}]})

配置文件中加入 /etc/mongod.conf
security:
  authorization: enabled




mongodb3.6开启认证，并创建用户

在配置文件中添加一下内容
security:
    authorization: enabled
    javascriptEnabled: true

在mongo shell中创建
db.createUser(
     {
       user:"root",
       pwd:"Q123456!",
       roles:[{role:"root",db:"admin"}]
     }
  )








